"""
UX analysis page for the Finam analytics dashboard
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from utils import get_ux_stats, get_sentiment_timeline


def show_ux_analysis(conversations):
	"""Display UX analysis page with sentiment and emotion analysis"""
	st.header("üòä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞")
	
	# Create tabs
	tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑", "üí° –ì–∏–ø–æ—Ç–µ–∑—ã"])
	
	with tab1:
		# Description section (empty for user to fill)
		st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Notes section (hardcoded)
		st.subheader("üìù –ó–∞–º–µ—Ç–∫–∏")
		st.info("–ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.")
		
		ux_stats = get_ux_stats(conversations)
	
		col1, col2, col3 = st.columns(3)
		
		with col1:
			st.metric("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—Ö–∞", f"{ux_stats['success_rate']:.1%}")
		with col2:
			st.metric("–û—Ç–∑—ã–≤—ã", ux_stats['feedback_count'])
		with col3:
			st.metric("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", ux_stats['suggestions_count'])
		
		col1, col2 = st.columns(2)
		
		with col1:
			st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
			if ux_stats['sentiments']:
				fig = px.pie(
					values=list(ux_stats['sentiments'].values()),
					names=list(ux_stats['sentiments'].keys()),
					title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
				)
				st.plotly_chart(fig, use_container_width=True)
			else:
				st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö")
		
		with col2:
			st.subheader("–≠–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
			if ux_stats['emotions']:
				fig = px.bar(
					x=list(ux_stats['emotions'].keys()),
					y=list(ux_stats['emotions'].values()),
					title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
				)
				st.plotly_chart(fig, use_container_width=True)
			else:
				st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö")
		
		# Sentiment over time
		st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
		sentiment_timeline = get_sentiment_timeline(conversations)
		
		if sentiment_timeline:
			sentiment_df = pd.DataFrame(sentiment_timeline)
			
			# Group by date and calculate sentiment scores
			sentiment_scores = {'positive': 1, 'neutral': 0, 'negative': -1}
			sentiment_df['score'] = sentiment_df['sentiment'].map(sentiment_scores)
			
			daily_sentiment = sentiment_df.groupby('date')['score'].mean().reset_index()
			
			fig = px.line(daily_sentiment, x='date', y='score', 
						 title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π",
						 labels={'score': '–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', 'date': '–î–∞—Ç–∞'})
			fig.add_hline(y=0, line_dash="dash", line_color="gray")
			st.plotly_chart(fig, use_container_width=True)
			
		# Download buttons for feedback and suggestions
		st.subheader("üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
		col_download1, col_download2 = st.columns(2)
		
		with col_download1:
			# Extract all feedback
			all_feedback = []
			for conv in conversations:
				feedback = conv.get('analysis', {}).get('ux', {}).get('feedback', [])
				for fb in feedback:
					all_feedback.append({
						'dialogue_id': conv.get('dialogue_id'),
						'feedback': fb,
						'timestamp': conv.get('start_time')
					})
			
			if all_feedback:
				feedback_df = pd.DataFrame(all_feedback)
				feedback_csv = feedback_df.to_csv(index=False)
				st.download_button(
					label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
					data=feedback_csv,
					file_name="user_feedback.csv",
					mime="text/csv"
				)
			else:
				st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
		
		with col_download2:
			# Extract all suggestions
			all_suggestions = []
			for conv in conversations:
				suggestions = conv.get('analysis', {}).get('ux', {}).get('suggestions', [])
				for sugg in suggestions:
					all_suggestions.append({
						'dialogue_id': conv.get('dialogue_id'),
						'suggestion': sugg,
						'timestamp': conv.get('start_time')
					})
			
			if all_suggestions:
				suggestions_df = pd.DataFrame(all_suggestions)
				suggestions_csv = suggestions_df.to_csv(index=False)
				st.download_button(
					label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
					data=suggestions_csv,
					file_name="user_suggestions.csv",
					mime="text/csv"
				)
			else:
				st.info("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
		
		# Satisfaction by agent system
		st.subheader("üéØ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∞–≥–µ–Ω—Ç—Å–∫–∏–º —Å–∏—Å—Ç–µ–º–∞–º")
		
		# Create satisfaction analysis by agent type
		agent_satisfaction = {}
		for conv in conversations:
			agent_types = conv.get('agent_types', [])
			is_successful = conv.get('analysis', {}).get('ux', {}).get('is_successful', None)
			sentiment = conv.get('analysis', {}).get('ux', {}).get('sentiment', 'neutral')
			
			if agent_types and is_successful is not None:
				for agent_type in agent_types:
					if agent_type not in agent_satisfaction:
						agent_satisfaction[agent_type] = {'positive': 0, 'neutral': 0, 'negative': 0, 'total': 0}
					
					agent_satisfaction[agent_type][sentiment] += 1
					agent_satisfaction[agent_type]['total'] += 1
		
		if agent_satisfaction:
			# Convert to DataFrame for plotting
			satisfaction_data = []
			for agent, data in agent_satisfaction.items():
				for sentiment, count in data.items():
					if sentiment != 'total':
						satisfaction_data.append({
							'Agent_Type': agent,
							'Sentiment': sentiment,
							'Count': count,
							'Percentage': (count / data['total']) * 100
						})
			
			satisfaction_df = pd.DataFrame(satisfaction_data)
			fig_satisfaction = px.bar(satisfaction_df, 
							 x='Agent_Type', 
							 y='Percentage', 
							 color='Sentiment',
							 title='–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤ (%)',
							 color_discrete_map={
								 'positive': 'green',
								 'neutral': 'yellow', 
								 'negative': 'red'
							 })
			st.plotly_chart(fig_satisfaction, use_container_width=True)
		else:
			st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∞–≥–µ–Ω—Ç—Å–∫–∏–º —Å–∏—Å—Ç–µ–º–∞–º")
	
	with tab2:
		st.subheader("üìù –ó–∞–º–µ—Ç–∫–∏")
		st.info("–ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.")