"""
UX analysis page for the Finam analytics dashboard
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from utils import get_ux_stats, get_sentiment_timeline


def show_ux_analysis(conversations):
	"""Display UX analysis page with sentiment and emotion analysis"""
	st.header("üòä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞")
	
	ux_stats = get_ux_stats(conversations)
	
	col1, col2, col3 = st.columns(3)
	
	with col1:
		st.metric("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—Ö–∞", f"{ux_stats['success_rate']:.1%}")
	with col2:
		st.metric("–û—Ç–∑—ã–≤—ã", ux_stats['feedback_count'])
	with col3:
		st.metric("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", ux_stats['suggestions_count'])
	
	col1, col2 = st.columns(2)
	
	with col1:
		st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
		if ux_stats['sentiments']:
			fig = px.pie(
				values=list(ux_stats['sentiments'].values()),
				names=list(ux_stats['sentiments'].keys()),
				title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
			)
			st.plotly_chart(fig, use_container_width=True)
		else:
			st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö")
	
	with col2:
		st.subheader("–≠–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		if ux_stats['emotions']:
			fig = px.bar(
				x=list(ux_stats['emotions'].keys()),
				y=list(ux_stats['emotions'].values()),
				title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
			)
			st.plotly_chart(fig, use_container_width=True)
		else:
			st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö")
	
	# Sentiment over time
	st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
	sentiment_timeline = get_sentiment_timeline(conversations)
	
	if sentiment_timeline:
		sentiment_df = pd.DataFrame(sentiment_timeline)
		
		# Group by date and calculate sentiment scores
		sentiment_scores = {'positive': 1, 'neutral': 0, 'negative': -1}
		sentiment_df['score'] = sentiment_df['sentiment'].map(sentiment_scores)
		
		daily_sentiment = sentiment_df.groupby('date')['score'].mean().reset_index()
		
		fig = px.line(daily_sentiment, x='date', y='score', 
					 title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π",
					 labels={'score': '–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', 'date': '–î–∞—Ç–∞'})
		fig.add_hline(y=0, line_dash="dash", line_color="gray")
		st.plotly_chart(fig, use_container_width=True)