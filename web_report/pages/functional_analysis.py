"""
Functional analysis page for the Finam analytics dashboard
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter

def show_functional_analysis(conversations):
	"""Display functional analysis page with agent type distribution and success metrics"""
	st.header("üîß –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
	
	# Create tabs
	tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑", "üí° –ì–∏–ø–æ—Ç–µ–∑—ã"])
	
	with tab1:
		# Description section (empty for user to fill)
		st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Parse data for analysis
		df = pd.DataFrame(conversations)
		
		# Agent type analysis (excluding supervisor)
		st.subheader("ü§ñ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤")
		
		# Extract agent types from all conversations
		all_agent_types = []
		for conv in conversations:
			agent_types = conv.get('agent_types', [])
			if agent_types:
				for agent_type in agent_types:
					if agent_type != 'supervisor':  # Exclude supervisor
						all_agent_types.append(agent_type)
		
		if all_agent_types:
			agent_counter = Counter(all_agent_types)
			agent_df = pd.DataFrame(list(agent_counter.items()), columns=['Agent Type', 'Count'])
			
			# Agent distribution pie chart
			fig_agents = px.pie(agent_df, values='Count', names='Agent Type', 
							   title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤')
			st.plotly_chart(fig_agents, use_container_width=True)
		else:
			st.warning("–î–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ conversations_data.json")
		
		# Success/Failure analysis
		st.subheader("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
		
		success_data = []
		for conv in conversations:
			is_successful = conv.get('analysis', {}).get('ux', {}).get('is_successful', None)
			if is_successful is not None:
				success_data.append('–£—Å–ø–µ—à–Ω–æ' if is_successful else '–ù–µ—É—Å–ø–µ—à–Ω–æ')
		
		if success_data:
			success_counter = Counter(success_data)
			success_df = pd.DataFrame(list(success_counter.items()), columns=['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
			
			# Success rate chart
			fig_success = px.bar(success_df, x='–°—Ç–∞—Ç—É—Å', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
							   title='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤', color='–°—Ç–∞—Ç—É—Å',
							   color_discrete_map={'–£—Å–ø–µ—à–Ω–æ': 'green', '–ù–µ—É—Å–ø–µ—à–Ω–æ': 'red'})
			st.plotly_chart(fig_success, use_container_width=True)
			
			# Success percentage
			total_requests = sum(success_counter.values())
			success_rate = (success_counter.get('–£—Å–ø–µ—à–Ω–æ', 0) / total_requests) * 100
			st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", f"{success_rate:.1f}%")
		else:
			st.warning("–î–∞–Ω–Ω—ã–µ –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		
		# Cross-analysis: Problems by Agent Type
		st.subheader("üìä –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑: –ü—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤")
		
		problem_agent_data = []
		for conv in conversations:
			problems = conv.get('analysis', {}).get('problems', {}).get('problems', [])
			agent_types = conv.get('agent_types', [])
			
			if problems and agent_types:
				for problem in problems:
					for agent_type in agent_types:
						if agent_type != 'supervisor':
							problem_agent_data.append({'Problem': problem, 'Agent_Type': agent_type})
		
		if problem_agent_data:
			problem_agent_df = pd.DataFrame(problem_agent_data)
			problem_agent_crosstab = pd.crosstab(problem_agent_df['Problem'], problem_agent_df['Agent_Type'])
			
			fig_heatmap = px.imshow(problem_agent_crosstab, 
								   title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤',
								   labels=dict(x="–¢–∏–ø –∞–≥–µ–Ω—Ç–∞", y="–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
			st.plotly_chart(fig_heatmap, use_container_width=True)
		else:
			st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º –∏ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
		
		# Cross-analysis: Categories by Success
		st.subheader("üìà –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
		
		category_success_data = []
		for conv in conversations:
			categories = conv.get('analysis', {}).get('request', {}).get('category', [])
			is_successful = conv.get('analysis', {}).get('ux', {}).get('is_successful', None)
			
			if categories and is_successful is not None:
				success_status = '–£—Å–ø–µ—à–Ω–æ' if is_successful else '–ù–µ—É—Å–ø–µ—à–Ω–æ'
				for category in categories:
					category_success_data.append({'Category': category, 'Success': success_status})
		
		if category_success_data:
			category_success_df = pd.DataFrame(category_success_data)
			category_success_crosstab = pd.crosstab(category_success_df['Category'], category_success_df['Success'])
			
			fig_category_success = px.bar(category_success_crosstab, 
										 title='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–ø—Ä–æ—Å–æ–≤',
										 labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'index': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'})
			st.plotly_chart(fig_category_success, use_container_width=True)
		else:
			st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
	
	with tab2:
		st.subheader("üí° –ì–∏–ø–æ—Ç–µ–∑—ã")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Placeholder for hypotheses
		st.text_area("–í–∞—à–∏ –≥–∏–ø–æ—Ç–µ–∑—ã:", 
					placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...", 
					height=200, 
					key="functional_hypotheses")