"""
Problems analysis page for the Finam analytics dashboard
"""

import streamlit as st
import pandas as pd
import plotly.express as px

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from utils import get_problems_stats


def show_problems_analysis(conversations):
	"""Display problems analysis page with issue detection and severity"""
	st.header("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º")
	
	# Create tabs
	tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑", "üí° –ì–∏–ø–æ—Ç–µ–∑—ã"])
	
	with tab1:
		# Description section (empty for user to fill)
		st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Comments section (empty for user to fill)
		st.subheader("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
		st.text_area("–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:", 
					placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–± –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–±–ª–µ–º...", 
					height=100, 
					key="problems_comments")
		
		problems = get_problems_stats(conversations)
		
		if problems:
			col1, col2 = st.columns([2, 1])
			
			with col1:
				# Problem frequency chart
				fig = px.bar(
					x=list(problems.values()),
					y=list(problems.keys()),
					orientation='h',
					title="–ß–∞—Å—Ç–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
				)
				fig.update_layout(yaxis={'categoryorder':'total ascending'})
				st.plotly_chart(fig, use_container_width=True)
			
			with col2:
				st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º")
				total_problems = sum(problems.values())
				st.metric("–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±–ª–µ–º", total_problems)
				st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º", len(problems))
				
				# Problem severity (mock classification for demo)
				st.subheader("–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º")
				high_severity = ["system_error", "data_loss", "security_breach"]
				medium_severity = ["performance_issue", "user_confusion", "timeout"]
				
				high_count = sum(problems.get(p, 0) for p in high_severity)
				medium_count = sum(problems.get(p, 0) for p in medium_severity)
				low_count = total_problems - high_count - medium_count
				
				severity_data = pd.DataFrame({
					'–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å': ['–í—ã—Å–æ–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–ù–∏–∑–∫–∞—è'],
					'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [high_count, medium_count, low_count]
				})
				
				fig = px.pie(severity_data, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å', 
							title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏")
				st.plotly_chart(fig, use_container_width=True)
			
			# Detailed problems table
			st.subheader("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
			problems_df = pd.DataFrame(list(problems.items()), columns=['–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã', '–ß–∞—Å—Ç–æ—Ç–∞'])
			problems_df['–ü—Ä–æ—Ü–µ–Ω—Ç'] = (problems_df['–ß–∞—Å—Ç–æ—Ç–∞'] / problems_df['–ß–∞—Å—Ç–æ—Ç–∞'].sum() * 100).round(2)
			problems_df = problems_df.sort_values('–ß–∞—Å—Ç–æ—Ç–∞', ascending=False)
			st.dataframe(problems_df, use_container_width=True)
			
		else:
			st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ –¥–∏–∞–ª–æ–≥–∞—Ö")
	
	with tab2:
		st.subheader("üí° –ì–∏–ø–æ—Ç–µ–∑—ã")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Placeholder for hypotheses
		st.text_area("–í–∞—à–∏ –≥–∏–ø–æ—Ç–µ–∑—ã:", 
					placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ —Å–∏—Å—Ç–µ–º–µ...", 
					height=200, 
					key="problems_hypotheses")