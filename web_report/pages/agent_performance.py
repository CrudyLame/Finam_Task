"""
Agent performance analysis page for the Finam analytics dashboard
"""

import streamlit as st
import pandas as pd
import plotly.express as px

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from utils import get_agent_performance_data


def show_agent_performance(conversations):
	"""Display agent performance analysis with usage and success metrics"""
	st.header("‚ö° –ê–≥–µ–Ω—Ç—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã")
	
	# Create tabs
	tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑", "üí° –ì–∏–ø–æ—Ç–µ–∑—ã"])
	
	with tab1:
		# Description section (empty for user to fill)
		st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Comments section (hardcoded)
		st.subheader("üìù –ó–∞–º–µ—Ç–∫–∏")
		st.info("–ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º.")
		
		# Extract agent data
		agent_data = get_agent_performance_data(conversations)
		
		if agent_data:
			agent_df = pd.DataFrame(agent_data)
			
			col1, col2 = st.columns(2)
			
			with col1:
				# Agent usage frequency
				agent_counts = agent_df['agent'].value_counts()
				fig = px.bar(
					x=agent_counts.index,
					y=agent_counts.values,
					title="–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"
				)
				st.plotly_chart(fig, use_container_width=True)
			
			with col2:
				# Agent success rates
				success_rates = agent_df.groupby('agent')['success'].mean()
				fig = px.bar(
					x=success_rates.index,
					y=success_rates.values,
					title="–£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤"
				)
				fig.update_layout(yaxis=dict(tickformat='.1%'))
				st.plotly_chart(fig, use_container_width=True)
			
			# Performance metrics table
			st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤")
			performance_metrics = agent_df.groupby('agent').agg({
				'success': ['count', 'mean'],
				'duration': 'mean',
				'messages': 'mean'
			}).round(2)
			
			performance_metrics.columns = ['–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π', '–£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞', '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)', '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']
			st.dataframe(performance_metrics, use_container_width=True)
			
		else:
			st.info("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
			st.write("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.")
	
	with tab2:
		st.subheader("üí° –ì–∏–ø–æ—Ç–µ–∑—ã")
		st.info("–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
		
		# Hardcoded hypotheses section
		st.info("–ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≥–∏–ø–æ—Ç–µ–∑—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º.")